Algorytm Genetyczny dla Problemu Komiwojażera

1. Wykorzystywane dane

    Macierz Odległości: Wczytywana z pliku tekstowego, reprezentuje symetryczną macierz odległości między miastami.
    Słownik Odległości: Tworzony na podstawie macierzy odległości, ułatwia szybki dostęp do odległości między dowolnymi dwoma miastami.

2. Funkcje

    load_triangular_matrix(file_path):
        Wczytuje trójkątną macierz odległości z pliku tekstowego.

    make_symmetric(matrix):
        Tworzy symetryczną macierz odległości na podstawie wczytanej trójkątnej.

    create_distance_lookup(distance_matrix):
        Tworzy słownik odległości na podstawie symetrycznej macierzy odległości.

    total_distance(route, distance_lookup):
        Oblicza łączną odległość dla danej trasy na podstawie słownika odległości.

    initialize_population(pop_size, num_cities):
        Inicjalizuje populację losowymi trasami.

    tournament_selection(population, distances, k):
        Wykonuje selekcję turniejową, wybierając najlepszą trasę spośród losowo wybranych k tras.

    pmx_crossover(parent1, parent2):
        Wykonuje krzyżowanie PMX (Partially Mapped Crossover) między dwoma rodzicami.

    inversion_mutation(route):
        Wykonuje mutację przez inwersję na danej trasie.

    exchange_mutation(route):
        Wykonuje mutację przez zamianę dwóch miast na danej trasie.

    generate_population_and_evaluate(population, distance_lookup, tournament_size):
        Tworzy nową populację poprzez selekcję, krzyżowanie i mutację, a następnie ocenia trasę każdego osobnika.

    genetic_algorithm(distance_matrix, pop_size, tournament_size, crossover_prob, inversion_prob, exchange_prob, num_generations, distance_lookup):
        Główna funkcja implementująca algorytm genetyczny.
        Inicjalizuje populację, a następnie w pętli ewolucyjnej tworzy i ocenia nową populację przez określoną liczbę generacji.
        Zwraca najlepszą trasę i jej długość.

3. Parametry

    pop_size: Liczba osobników w populacji.
    tournament_size: Liczba osobników biorących udział w turnieju selekcyjnym.
    crossover_prob: Prawdopodobieństwo krzyżowania.
    inversion_prob: Prawdopodobieństwo mutacji przez inwersję.
    exchange_prob: Prawdopodobieństwo mutacji przez zamianę.
    num_generations: Liczba iteracji algorytmu genetycznego.

4. Wyniki

    Najlepsza trasa oraz jej długość są wyświetlane po zakończeniu algorytmu.
    Mierzenie czasu wykonania dla oceny wydajności algorytmu.

5. Uwagi

    Parametry algorytmu mogą wpływać na jego skuteczność.
    Eksperymentowanie z wartościami parametrów może prowadzić do uzyskania lepszych wyników.

6. Przykładowe Użycie

    Wczytanie macierzy odległości z pliku, ustawienie parametrów i uruchomienie algorytmu.

Podsumowanie

Kod implementuje algorytm genetyczny do rozwiązania problemu komiwojażera, gdzie reprezentacja tras opiera się na permutacjach miast. Algorytm ewolucyjny jest stosunkowo uniwersalny, co pozwala na dostosowywanie parametrów w celu optymalizacji wyników.
Przesłane rozwiązanie, z obecnymi parametrami, pozwalało regularnie uzyskiwać trasę w okolicach 7500-8000 (czasami powyżej), a czas wykonywania skryptu to około 22 sekundy.
Przy np. większej populacji (5000), wynik stawał się odrobinę lepszy, lecz czas wykonywania skryptu wynosił w okolicach 110 sekund.
Po profilowaniu aplikacji udało się jeszcze bardziej poprawić czas (dla populacji 1000 - 10 sekund, dla 5000 - 70 sekund), jednak wynik częściej wynosił w okolicach 8000-9000.
Załączonych jest również kilka zrzutów ekranu, pokazujących osiągane wyniki